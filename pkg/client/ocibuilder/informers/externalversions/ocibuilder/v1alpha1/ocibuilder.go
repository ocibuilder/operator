/*
Copyright 2019 BlackRock, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	versioned2 "github.com/ocibuilder/ocibuilder/controller/pkg/client/ocibuilder/clientset/versioned"
	internalinterfaces2 "github.com/ocibuilder/ocibuilder/controller/pkg/client/ocibuilder/informers/externalversions/internalinterfaces"
	v1alpha12 "github.com/ocibuilder/ocibuilder/controller/pkg/client/ocibuilder/listers/ocibuilder/v1alpha1"
	ocibuilderv1alpha1 "github.com/ocibuilder/ocibuilder/pkg/apis/ocibuilder/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// OCIBuilderInformer provides access to a shared informer and lister for
// OCIBuilders.
type OCIBuilderInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha12.OCIBuilderLister
}

type oCIBuilderInformer struct {
	factory          internalinterfaces2.SharedInformerFactory
	tweakListOptions internalinterfaces2.TweakListOptionsFunc
	namespace        string
}

// NewOCIBuilderInformer constructs a new informer for OCIBuilder type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewOCIBuilderInformer(client versioned2.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredOCIBuilderInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredOCIBuilderInformer constructs a new informer for OCIBuilder type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredOCIBuilderInformer(client versioned2.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces2.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OcibuilderV1alpha1().OCIBuilders(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OcibuilderV1alpha1().OCIBuilders(namespace).Watch(options)
			},
		},
		&ocibuilderv1alpha1.OCIBuilder{},
		resyncPeriod,
		indexers,
	)
}

func (f *oCIBuilderInformer) defaultInformer(client versioned2.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredOCIBuilderInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *oCIBuilderInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&ocibuilderv1alpha1.OCIBuilder{}, f.defaultInformer)
}

func (f *oCIBuilderInformer) Lister() v1alpha12.OCIBuilderLister {
	return v1alpha12.NewOCIBuilderLister(f.Informer().GetIndexer())
}
